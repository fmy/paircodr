// Generated by CoffeeScript 1.6.3
var Code, app, bodies, cons, counts, express, haml, http, io, model, moment, mongoose, partials, routes;

express = require('express');

routes = require('./routes.js');

haml = require('hamljs');

io = require('socket.io');

cons = require('consolidate');

http = require('http');

moment = require('the_time.js');

partials = require('express-partials');

app = express();

app.use(partials());

app.configure(function() {
  app.set('port', process.env.PORT || 4000);
  app.set('views', __dirname + '/views');
  app.engine('haml', cons.haml);
  app.set('view engine', 'haml');
  app.use(express.favicon());
  app.use(express.logger('dev'));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  return app.use(express["static"](__dirname + '/public'));
});

app.configure('development', function() {
  return app.use(express.errorHandler());
});

app.get('/', routes.index);

app.get('/new', routes["new"]);

app.get('/:id', routes.code);

http = http.createServer(app).listen(app.get('port'), function() {
  return console.log("Express server listening on port " + app.get('port'));
});

mongoose = require('mongoose');

model = require("./model.js");

Code = model.Code;

bodies = {};

counts = {};

io = io.listen(http, {
  'leg level': 1
});

io.sockets.on('connection', function(socket) {
  console.log("connection ---------------------- " + socket.id);
  socket.emit("connected");
  socket.on("code:join", function(data) {
    var room;
    room = data.id;
    socket.set("room", room);
    socket.set("user", data.user);
    data.socket_id = socket.id;
    io.sockets["in"](room).emit("user:loginned", data);
    socket.join(room);
    if (counts[room]) {
      counts[room] = counts[room] + 1;
      return socket.emit("code:joined", bodies[room]);
    } else {
      counts[room] = 1;
      return bodies[room] = data.body;
    }
  });
  socket.on("code:edit", function(data) {
    var room;
    room = "";
    socket.get("room", function(err, _room) {
      return room = _room;
    });
    bodies[room] = data.body;
    console.log(bodies);
    return socket.broadcast.to(room).emit("code:edited", data.change);
  });
  socket.on("code:move", function(cursor) {
    var room;
    room = "";
    socket.get("room", function(err, _room) {
      return room = _room;
    });
    return socket.broadcast.to(room).emit("code:moved", {
      socket_id: socket.id,
      cursor: cursor
    });
  });
  socket.on("code:save", function(data) {
    var room;
    room = "";
    socket.get("room", function(err, _room) {
      return room = _room;
    });
    return Code.findById(data.id, function(err, code) {
      console.log(code);
      if (err) {
        return;
      }
      code.title = data.title;
      code.body = data.body;
      return code.save(function(err) {
        return io.sockets["in"](room).emit("code:saved", data);
      });
    });
  });
  return socket.on("disconnect", function() {
    var room;
    room = "";
    socket.get("room", function(err, _room) {
      return room = _room;
    });
    counts[room] = counts[room] - 1;
    if (counts[room] < 1) {
      delete counts[room];
      delete bodies[room];
    }
    return console.log(counts);
  });
});
